import React from 'react';

import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import {
	Carousel,
	CarouselContent,
	CarouselItem,
	CarouselNext,
	CarouselPrevious,
} from '@/components/ui/carousel';
import {
	Dialog,
	DialogClose,
	DialogContent,
	DialogFooter,
	DialogHeader,
	DialogTitle,
	DialogTrigger,
} from '@/components/ui/dialog';

import { Info } from 'lucide-react';
export default function AboutModal() {
	return (
		<>
			<Dialog>
				<DialogTrigger asChild>
					<Button variant="outline">
						<Info />
						{'About Project'}
					</Button>
				</DialogTrigger>
				<DialogContent className="max-w-full sm:max-w-[600px]">
					<DialogHeader>
						<DialogTitle>{'About Project'}</DialogTitle>
					</DialogHeader>
					<div className="w-full flex flex-row justify-center">
						<Carousel className="max-w-full sm:max-w-[480px]">
							<CarouselContent>
								<CarouselItem key={'rules'}>
									<div className="flex gap-4 py-4 items-center justify-center h-full">
										<Card>
											<CardContent className="p-4">
												<h4 className="text-xl font-semibold tracking-tight border-b pb-2">
													{'Game rules & features'}
												</h4>
												<ul className="my-1 ml-6 list-disc [&>li]:mt-2">
													<li>
														{
															'The pieces must be fully placed and can not overlap on each other'
														}
													</li>
													<li>
														{
															'The full game area must be covered'
														}
													</li>
													<li>
														{
															'Application will return solution, detect if solution is impossible or stop by timeout if max timeout reached'
														}
													</li>
													<li>
														{
															'Some fun predefined sets can be used or random set can be generated. Generated sets are full random so can be unsolvable'
														}
													</li>
												</ul>
											</CardContent>
										</Card>
									</div>
								</CarouselItem>
								<CarouselItem key={'algorithm'}>
									<div className="flex gap-4 py-4 items-center justify-center h-full">
										<Card>
											<CardContent className="p-4">
												<h4 className="text-xl font-semibold tracking-tight border-b pb-2">
													{'Used Algorithm'}
												</h4>
												<div className="my-1 ml-1">
													<p className="leading-7 [&:not(:first-child)]:mt-6">
														{
															'To solve puzzle Greedy Backtracking algorithm was implemented'
														}
													</p>
													<ul className="my-1 list-none [&>li]:mt-2">
														<li>
															<strong>
																{
																	'How it works: '
																}
															</strong>
															{
																'First, we re-order shapes from largest to smallest to try most "greedy" placement first.'
															}
															<br />
															{
																'Next, every shape dimensional orientation varianst are pregenerated by clockwise rotation, horizontal and vertical flipping.'
															}
															<br />
															{
																'Then, algorithm recursively attempts to place each shape in a position on the grid and checks if the placement allows completing the puzzle.'
															}
														</li>
														<li>
															<strong>
																{'Pros: '}
															</strong>
															{
																'Generally effective for exploring possible configurations and can find all solutions if they exist. Logic is simple and easy to test.'
															}
														</li>
														<li>
															<strong>
																{'Cons: '}
															</strong>
															{
																'For large grids or many shapes, this can become computationally expensive.'
															}
														</li>
													</ul>
												</div>
											</CardContent>
										</Card>
									</div>
								</CarouselItem>
								<CarouselItem key={'complexity'}>
									<div className="flex gap-4 py-4 items-center justify-center h-full">
										<Card>
											<CardContent className="p-4">
												<h4 className="text-xl font-semibold tracking-tight border-b pb-2">
													{'Computational Complexity'}
												</h4>
												<div className="my-1 ml-1">
													<p className="leading-7 [&:not(:first-child)]:mt-6">
														{
															'So first we sort all shapes descending by size. This operation computational complexity is '
														}
														<code className="relative rounded bg-muted px-[0.3rem] py-[0.2rem] font-mono text-sm font-semibold">
															{'O(n log n)'}
														</code>
													</p>
													<p className="leading-7 [&:not(:first-child)]:mt-6">
														{
															'Next, recursive backtracking algorithm is applied trying to place shapes into area. The computational complexity of implemented backtracking algorithm can be challenging to express precisely, as it depends on factors like the number of shapes and the layout of each shape.'
														}
													</p>
													<p className="leading-7 [&:not(:first-child)]:mt-6">
														{
															'But we can estimate an upper bound based on the possible placements and branches created in the recursive process.'
														}
													</p>
													<p className="leading-7 [&:not(:first-child)]:mt-6">
														{
															'Assuming there is P possible placements for each shape, considering recursive branching of backtracking algorithm the worst-case complexity for n shapes is '
														}
														<code className="relative rounded bg-muted px-[0.3rem] py-[0.2rem] font-mono text-sm font-semibold">
															{'O(P'}
															<sup>n</sup>
															{')'}
														</code>
													</p>
													<p className="leading-7 [&:not(:first-child)]:mt-6">
														{
															'So total computational upper-bound complexity is '
														}
														<br />
														<code className="relative rounded bg-muted px-[0.3rem] py-[0.2rem] font-mono text-sm font-semibold">
															{'O(n log n) + O(P'}
															<sup>n</sup>
															{')'}
														</code>
														{
															'In most scenarios initial sorting will greatly improve computational efficiency for small complexity increase.'
														}
													</p>
												</div>
											</CardContent>
										</Card>
									</div>
								</CarouselItem>
							</CarouselContent>
							<CarouselPrevious />
							<CarouselNext />
						</Carousel>
					</div>
					<DialogFooter className="sm:justify-end">
						<DialogClose asChild>
							<Button type="button" variant="secondary">
								Close
							</Button>
						</DialogClose>
					</DialogFooter>
				</DialogContent>
			</Dialog>
		</>
	);
}
